{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Installation","text":"<p>The first user you register is automatically set as admin of the instance.</p>"},{"location":"index.html#using-docker","title":"Using Docker","text":"<p>Production Usage</p> <p>You will have to mount a directory to <code>/data</code>, giving it <code>1001:1001</code> permissions. It is also recommended to use PostgreSQL in production.</p> <p>To get a demo server running, use the docker image:</p> <pre><code>$ docker run \\\n--detach \\\n--name ryot \\\n--pull always \\\n--publish 8000:8000 \\\n--env \"SERVER_INSECURE_COOKIE=true\" \\\nghcr.io/ignisda/ryot:latest\n</code></pre> <p><code>docker-compose</code> with PostgreSQL</p> <pre><code>version: '3.9'\n\nservices:\npostgres:\nimage: postgres:15-alpine\nrestart: unless-stopped\nvolumes:\n- postgres_storage:/var/lib/postgresql/data\nenvironment:\nPOSTGRES_PASSWORD: postgres\nPOSTGRES_USER: postgres\nPOSTGRES_DB: postgres\n\nryot:\nimage: 'ghcr.io/ignisda/ryot:latest'\nenvironment:\n- SERVER_INSECURE_COOKIE=true\n- DATABASE_URL=postgres://postgres:postgres@postgres:5432/postgres\nports:\n- '8000:8000'\nvolumes:\n- ./ryot-data:/data\npull_policy: always\ncontainer_name: ryot\n\nvolumes:\npostgres_storage:\n</code></pre> <p>Warning</p> <p>The <code>SERVER_INSECURE_COOKIE</code> configuration is only required if you are not running HTTPs.</p> <p>In addition to the <code>latest</code> tag, we also publish an <code>unstable</code> tag from the latest pre-release or release, whichever is newer.</p>"},{"location":"index.html#quick-run-a-release","title":"Quick-run a release","text":"<p>Each release has an installation script that can be used to install the <code>ryot</code> binary. Follow the instructions in the release to use this script.</p> <p>Alternatively using eget:</p> <pre><code>$ eget ignisda/ryot\n</code></pre>"},{"location":"index.html#compile-and-run-from-source","title":"Compile and run from source","text":"<p>First install moonrepo</p> <pre><code># Build the frontend\n$ moon run frontend:build\n\n# Run it\n$ cargo run --bin ryot --release\n</code></pre>"},{"location":"architecture.html","title":"Architecture","text":"<p>In production, the frontend is a pre-rendered Nextjs app served statically by the Axum backend server.</p>"},{"location":"architecture.html#development","title":"Development","text":"<p>In development, both servers are started independently running on <code>:3000</code> and <code>:8000</code> respectively. To get them running, install mprocs, and run <code>mprocs</code> in the project root. If you do not want to install <code>mprocs</code>, take a look at <code>mproc.yaml</code> to see what all commands are needed to get it working.</p> <p>Unless it is a very small change, I prefer creating a separate branch and merging it via an MR when it is done. The changelog is generated using git-chglog. Once all changes are done, run the following command to update the changelog.</p> <pre><code>$ git-chglog --next-tag &lt;tag-name&gt; -o CHANGELOG.md\n</code></pre>"},{"location":"configuration.html","title":"Configuration","text":"<p>You can specify configuration options via files (loaded from <code>config/ryot.json</code>, <code>config/ryot.toml</code>, <code>config/ryot.yaml</code>) or via environment variables.</p> <p>To set the equivalent environment variables, join keys by <code>_</code> (underscore) and UPPER_SNAKE_CASE the characters.</p> <p>Ryot serves the final configuration loaded at the <code>/config</code> endpoint as JSON (example). This can also be treated as a health endpoint.</p> <p>Info</p> <p>The defaults can be inspected in the config builder.</p>"},{"location":"configuration.html#important-parameters","title":"Important parameters","text":"Key / Environment variable Description - / <code>PORT</code> The port to listen on. <code>database.url</code> / <code>DATABASE_URL</code> The database connection string. Supports SQLite, MySQL and Postgres. <code>video_games.twitch.client_id</code> / <code>VIDEO_GAMES_TWITCH_CLIENT_ID</code> The client ID issues by Twitch. Required to enable video games tracking. More information <code>video_games.twitch.client_secret</code> / <code>VIDEO_GAMES_TWITCH_CLIENT_SECRET</code> The client secret issued by Twitch. Required to enable video games tracking. <code>file_storage.s3_access_key_id</code> / <code>FILE_STORAGE_S3_ACCESS_KEY_ID</code> The access key ID for the S3 compatible file storage. Required to enable file storage. More information <code>file_storage.s3_bucket_name</code> / <code>FILE_STORAGE_S3_BUCKET_NAME</code> The name of the S3 compatible bucket. Required to enable file storage. <code>file_storage.s3_secret_access_key</code> / <code>FILE_STORAGE_S3_SECRET_ACCESS_KEY</code> The secret access key for the S3 compatible file storage. Required to enable file storage. <code>file_storage.s3_url</code> / <code>FILE_STORAGE_S3_URL</code> The URL for the S3 compatible file storage. <code>server.insecure_cookie</code> / <code>SERVER_INSECURE_COOKIE</code> This will make auth cookies insecure and should be set to <code>true</code> if you are running the server on <code>localhost</code>. More information"},{"location":"configuration.html#all-parameters","title":"All parameters","text":"<p>The root is at the <code>AppConfig</code> interface.</p> <pre><code>// Automatically generated by schematic. DO NOT MODIFY!\n\n/* eslint-disable */\n\nexport interface AnimeAnilistConfig {\n\n}\n\nexport interface AnimeConfig {\n/** Settings related to Anilist (anime). */\nanilist: AnimeAnilistConfig;\n}\n\nexport interface AudibleConfig {\n/** Settings related to locale for making requests Audible. */\nlocale: string;\n}\n\nexport interface AudioBookConfig {\n/** Settings related to Audible. */\naudible: AudibleConfig;\n}\n\nexport interface GoogleBooksConfig {\n\n}\n\nexport type OpenlibraryCoverImageSize = 'S' | 'M' | 'L';\n\nexport interface OpenlibraryConfig {\n/** The image sizes to fetch from Openlibrary. */\ncover_image_size: OpenlibraryCoverImageSize;\n}\n\nexport interface BookConfig {\n/** Settings related to Google Books. */\ngoogleBooks: GoogleBooksConfig;\n/** Settings related to Openlibrary. */\nopenlibrary: OpenlibraryConfig;\n}\n\nexport interface DatabaseConfig {\n/**\n     * The directory where user auth tokens will be persisted.\n     * @default '/data'\n     */\nauth_db_path: string;\n/**\n     * The database connection string. Supports SQLite, MySQL and Postgres.\n     * Format described in https://www.sea-ql.org/SeaORM/docs/install-and-config/connection.\n     */\nurl: string;\n}\n\nexport interface FreeExerciseDbConfig {\n/**\n     * The base URL to prefix for all images.\n     * @default 'https://raw.githubusercontent.com/yuhonas/free-exercise-db/main/exercises'\n     */\nimages_prefix_url: string;\n/**\n     * The URL for the raw JSON for all exercises.\n     * @default 'https://raw.githubusercontent.com/yuhonas/free-exercise-db/main/dist/exercises.json'\n     */\njson_url: string;\n}\n\nexport interface ExerciseConfig {\ndb: FreeExerciseDbConfig;\n}\n\nexport interface FileStorageConfig {\n/**\n     * The access key ID for the S3 compatible file storage. **Required*to\n     * enable file storage.\n     */\ns3_access_key_id: string;\n/** The name of the S3 compatible bucket. **Required*to enable file storage. */\ns3_bucket_name: string;\n/**\n     * The region for the S3 compatible file storage.\n     * @default 'us-east-1'\n     */\ns3_region: string;\n/**\n     * The secret access key for the S3 compatible file storage. **Required**\n     * to enable file storage.\n     */\ns3_secret_access_key: string;\n/** The URL for the S3 compatible file storage. */\ns3_url: string;\n}\n\nexport interface IntegrationConfig {\n/** The salt used to hash user IDs. */\nhasher_salt: string;\n/**\n     * The maximum progress limit after which a media is considered to be completed.\n     * @default 95\n     */\nmaximum_progress_limit: number;\n/**\n     * The minimum progress limit before which a media is considered to be started.\n     * @default 2\n     */\nminimum_progress_limit: number;\n/**\n     * Sync data from [yank](/docs/guides/integrations.md) based integrations\n     * every `n` hours.\n     * @default 2\n     */\npull_every: number;\n}\n\nexport interface MangaAnilistConfig {\n\n}\n\nexport interface MangaConfig {\n/** Settings related to Anilist (manga). */\nanilist: MangaAnilistConfig;\n}\n\nexport interface MediaConfig {\n\n}\n\nexport interface MoviesTmdbConfig {\n/** The access token for the TMDB API. */\naccess_token: string;\n/** The locale to use for making requests to TMDB API. */\nlocale: string;\n}\n\nexport interface MovieConfig {\n/** Settings related to TMDB (movies). */\ntmdb: MoviesTmdbConfig;\n}\n\nexport interface ITunesConfig {\n/** The locale to use for making requests to iTunes API. */\nlocale: string;\n}\n\nexport interface ListenNotesConfig {\n/** The access token for the Listennotes API. */\napi_token: string;\n}\n\nexport interface PodcastConfig {\n/** Settings related to iTunes. */\nitunes: ITunesConfig;\n/** Settings related to Listennotes. */\nlistennotes: ListenNotesConfig;\n}\n\nexport interface SchedulerConfig {\n/**\n     * The url to the SQLite database where job related data needs to be stored.\n     * @default 'sqlite::memory:'\n     */\ndatabase_url: string;\n/**\n     * The number of jobs to process every 5 seconds when updating metadata in\n     * the background.\n     * @default 5\n     */\nrate_limit_num: number;\n/**\n     * Deploy a job every x hours that performs user cleanup and summary\n     * calculation.\n     * @default 12\n     */\nuser_cleanup_every: number;\n}\n\nexport interface ServerConfig {\n/** The path where the config file will be written once the server boots up. */\nconfig_dump_path: string;\n/** An array of URLs for CORS. */\ncors_origins: string[];\n/**\n     * Whether default credentials will be populated on the login page of the\n     * instance.\n     */\ndefault_credentials: boolean;\n/**\n     * This will make auth cookies insecure and should be set to `true` if you\n     * are running the server on `localhost`.\n     * [More information](https://github.com/IgnisDa/ryot/issues/23)\n     */\ninsecure_cookie: boolean;\n/**\n     * The hours in which a media can be marked as seen again for a user. This\n     * is used so that the same media can not be used marked as started when\n     * it has been already marked as seen in the last `n` hours.\n     * @default 2\n     */\nprogress_update_threshold: number;\n}\n\nexport interface ShowsTmdbConfig {\n/** The access token for the TMDB API. */\naccess_token: string;\n/** The locale to use for making requests to TMDB API. */\nlocale: string;\n}\n\nexport interface ShowConfig {\n/** Settings related to TMDB (shows). */\ntmdb: ShowsTmdbConfig;\n}\n\nexport interface UsersConfig {\n/**\n     * Whether users will be allowed to change their password in their profile\n     * settings.\n     * @default true\n     */\nallow_changing_password: boolean;\n/**\n     * Whether users will be allowed to change their username in their profile\n     * settings.\n     * @default true\n     */\nallow_changing_username: boolean;\n/**\n     * Whether new users will be allowed to sign up to this instance.\n     * @default true\n     */\nallow_registration: boolean;\n/**\n     * The number of days till login auth token is valid.\n     * @default 90\n     */\ntoken_valid_for_days: number;\n}\n\nexport type IgdbImageSize = 't_original';\n\nexport interface IgdbConfig {\n/** The image sizes to fetch from IGDB. */\nimage_size: IgdbImageSize;\n}\n\nexport interface TwitchConfig {\n/**\n     * The client ID issues by Twitch. **Required*to enable video games\n     * tracking. [More information](/docs/guides/video-games.md)\n     */\nclient_id: string;\n/**\n     * The client secret issued by Twitch. **Required*to enable video games\n     * tracking.\n     */\nclient_secret: string;\n}\n\nexport interface VideoGameConfig {\n/** Settings related to IGDB. */\nigdb: IgdbConfig;\n/** Settings related to Twitch. */\ntwitch: TwitchConfig;\n}\n\nexport interface AppConfig {\n/** Settings related to anime. */\nanime: AnimeConfig;\n/** Settings related to audio books. */\naudio_books: AudioBookConfig;\n/** Settings related to books. */\nbooks: BookConfig;\n/** The database related settings. */\ndatabase: DatabaseConfig;\n/** Settings related to exercises. */\nexercise: ExerciseConfig;\n/** Settings related to file storage. */\nfile_storage: FileStorageConfig;\n/** Settings related to external integrations. */\nintegration: IntegrationConfig;\n/** Settings related to manga. */\nmanga: MangaConfig;\n/** Settings related to media. */\nmedia: MediaConfig;\n/** Settings related to movies. */\nmovies: MovieConfig;\n/** Settings related to podcasts. */\npodcasts: PodcastConfig;\n/** Settings related to scheduler. */\nscheduler: SchedulerConfig;\n/** Settings related to server. */\nserver: ServerConfig;\n/** Settings related to shows. */\nshows: ShowConfig;\n/** Settings related to users. */\nusers: UsersConfig;\n/** Settings related to video games. */\nvideo_games: VideoGameConfig;\n}\n</code></pre>"},{"location":"importing.html","title":"Importing","text":"<p>Importing is meant to be a one-time operation. They are irreversible. Ryot supports importing media from a number of sources. To start importing, click on \"New import\" in the \"Actions\" section of the dashboard.</p> <p>An import can fail at various steps. Ryot creates a report when an import is complete. You can go to the reports page by click on \"Reports\" link on the imports page.</p>"},{"location":"importing.html#mediatracker","title":"MediaTracker","text":"<p>You can import from MediaTracker, with the following caveats:</p> <ul> <li>Items that are in progress are always imported with 100% progress. They are   added to the \"In Progress\" collection so you can manually fix their progress   if needed.</li> <li>Ryot does not support calendars yet.</li> </ul>"},{"location":"importing.html#steps","title":"Steps","text":"<ul> <li>Login to your MediaTracker account and click on your name on the top right.</li> <li>Click on the \"Application tokens\" section.</li> <li>Enter a name and click on \"Add token\".</li> <li>Copy the token that was just generated.</li> <li>Enter the details in the inputs.</li> </ul>"},{"location":"importing.html#goodreads","title":"Goodreads","text":"<p>Ryot translates Goodreads shelves in the following manner:</p> <ul> <li>Want To Read -&gt; Watchlist</li> </ul>"},{"location":"importing.html#steps_1","title":"Steps","text":"<ul> <li>Login to your Goodreads account and go to the \"My Books\" section.</li> <li>Right click on the RSS Link on the bottom right of the screen and copy it.</li> <li>Enter this URL in the input.</li> </ul>"},{"location":"importing.html#trakt","title":"Trakt","text":"<p>All movies and shows can be imported from Trakt along with their ratings, history, comments and lists. A few points to note.</p> <ul> <li>It is necessary to set your account's privacy to public during the   duration of the import. The Trakt authentication flow is pretty complicated   and I don't think it would be worth implementing.</li> <li>Items that have been \"check(ed) in\" will not be imported.</li> </ul>"},{"location":"importing.html#steps_2","title":"Steps","text":"<ul> <li>Login to your Trakt account and go to the settings page.</li> <li>If your account is set to private, uncheck the box next to it. You can revert   this change once the import is complete.</li> <li>If you have any lists that are private, you need to change them to public.   Otherwise they will not be imported.</li> <li>Find your profile slug. This is usually your username. You can find it by   going to your profile page, and checking the URL.</li> <li>Enter this username in the input.</li> </ul>"},{"location":"importing.html#movary","title":"Movary","text":"<p>All movies can be imported from Movary along with their ratings, history, and comments.</p>"},{"location":"importing.html#steps_3","title":"Steps","text":"<ul> <li>Login to your Movary account and go to the settings page. Go to \"Personal data\"   under the \"Account\" section.</li> <li>Export \"history.csv\" and \"ratings.csv\".</li> <li>Upload these files in the input.</li> </ul>"},{"location":"importing.html#storygraph","title":"StoryGraph","text":"<p>Imports from StoryGraph work using ISBN. All books in your export that have an ISBN attached to them will be imported. Ryot translates \"Read Status\" in the following manner:</p> <ul> <li>to-read -&gt; Watchlist</li> </ul>"},{"location":"importing.html#steps_4","title":"Steps","text":"<ul> <li>Login to your account and click on your profile and go to the \"Manage Account\"   page.</li> <li>Scroll to the bottom and click on \"Export StoryGraph Library\" and then   \"Generate export\".</li> <li>Once the export is done, you will receive an email. refresh the page above and   download the CSV file.</li> <li>Optionally, you can edit the CSV file and manually add the missing ISBN.</li> <li>Upload this file in the input.</li> </ul>"},{"location":"importing.html#media-json","title":"Media JSON","text":"<p>This can be used to import data from a generic JSON file. The import format required is described in the exporting documentation.</p> <p>You can see an example file by exporting from the demo instance as described in the exporting documentation.</p>"},{"location":"importing.html#notes","title":"Notes","text":"<ul> <li>Imports are very difficult to have 100% success rate. Though we try our best,   you might have to manually import some data from your previous provider.</li> <li>You can see the descriptions of the failing importing steps by reviewing the   documentation of the <code>ImportFailStep</code> enum in the <code>/graphql</code> endpoint.</li> </ul>"},{"location":"integrations.html","title":"Integrations","text":"<p>Integrations can be used to continuously update your media progress. They can be of two types:</p> <ul> <li>Yank: Progress data is downloaded from an externally running server at a periodic interval.</li> <li>Sink: An external client publishes progress updates to the Ryot server.</li> </ul> <p>Info</p> <p>An item is marked as started when it has more than 2% progress and marked as completed when it has more than 95% progress.</p>"},{"location":"integrations.html#yank-plugins","title":"Yank plugins","text":"<p>For each integration you want to enable, credentials for the external server must be saved to your profile. To do so, go to the \"Settings\" tab and add a new integration under the \"Integrations\" tab.</p>"},{"location":"integrations.html#audiobookshelf","title":"Audiobookshelf","text":"<p>The Audiobookshelf integration can sync all media which have a match from Audible.</p> <ol> <li>Obtain an API token as described in the Audiobookshelf authentication docs.</li> <li>Go to your Ryot user settings and add the correct details as described in the yank section.</li> </ol>"},{"location":"integrations.html#sink-plugins","title":"Sink plugins","text":"<p>To start, go to the \"Settings\" tab and generate a new application token from under the \"Tokens\" tab. It will look like this: <code>e96fca00-18b1-467c-80f0-8534e09ed790</code>.</p>"},{"location":"integrations.html#jellyfin","title":"Jellyfin","text":"<p>Automatically add new Jellyin movie and show plays to Ryot. It will work for all the media that have been a valid TMDb ID attached to their metadata.</p> <p>Info</p> <p>Requires the unofficial webhook plugin to be installed and active in Jellyfin.</p> <ol> <li>Generate a slug in the integration settings page. Copy the newly generated slug.</li> <li>In the Jellyfin webhook plugin settings, add a new webhook using the following settings:<ul> <li>Webhook Url =&gt; <code>&lt;instance_url&gt;/webhooks/integrations/jellyfin/&lt;slug&gt;</code></li> <li>Payload format =&gt; <code>Default</code></li> <li>Listen to events only for =&gt; Choose your user</li> <li>Events =&gt; <code>Play</code>, <code>Pause</code>, <code>Resume</code>, and <code>Stop</code></li> </ul> </li> </ol> <p>Tip</p> <p>Keep your webhook url private to prevent abuse.</p>"},{"location":"integrations.html#kodi","title":"Kodi","text":"<p>The Kodi integration allows syncing the current movie or TV show you are watching. It will work for all the media that have been a valid TMDb ID attached to their metadata.</p> <ol> <li>Download the addon from github releases. The file will have a name of <code>script.ryot.zip</code>.</li> <li>Install the zipped addon to your Kodi instance. Once installed, it will be visible under the \"Services\" sub category named \"Ryot\".</li> <li>Click on \"Configure\" to change the addon settings and fill the correct details.</li> </ol>"},{"location":"guides/deployment.html","title":"Deployment","text":"<p>The easiest way to deploy Ryot is using the docker image. Here is a non-exhaustive set of guides to deploy Ryot.</p>"},{"location":"guides/deployment.html#dokku","title":"Dokku","text":"<p>This is a script that automatically sets up a Ryot server using the docker image uploaded to DockerHub and creates a Dokku app. The script assumes you have a global domain set-up (i.e. the file <code>/home/dokku/VHOST</code> exists). It needs to be run with <code>sudo</code> privileges.</p> <p>Re-running it updates the running server to the latest version.</p> <pre><code>#!/usr/bin/env bash\n\nset -euo pipefail\n\nif [ \"$EUID\" -ne 0 ]\nthen echo \"Please run as root\"\nexit\nfi\n\nIMAGE_NAME=\"ghcr.io/ignisda/ryot\"\nAPPNAME=\"\"\n\nread -rp \"Enter the name of the app: \" APPNAME\n\n# check if app name is empty\nif [ -z \"$APPNAME\" ]; then\necho \"App name empty. Using default name: ryot\"\nAPPNAME=\"ryot\"\nfi\n\n# pull the latest image\ndocker rmi -f \"$IMAGE_NAME\" || true\ndocker pull \"$IMAGE_NAME:latest\"\nimage_sha=\"$(docker inspect --format=\"{{index .RepoDigests 0}}\" $IMAGE_NAME)\"\necho \"Calculated image sha: $image_sha\"\n\nif dokku apps:exists $APPNAME; then\ndokku git:from-image $APPNAME $image_sha || echo \"Already on latest\"\nexit 0\nfi\n\ndokku apps:create \"$APPNAME\"\ndokku storage:ensure-directory \"$APPNAME\"\n\n# check if required dokku plugin exists\nif ! dokku plugin:list | grep letsencrypt; then\ndokku plugin:install https://github.com/dokku/dokku-letsencrypt.git\nfi\n# check if global email for letsencrypt is set\nif ! dokku config:get --global DOKKU_LETSENCRYPT_EMAIL; then\nread -rp \"Enter email address for letsencrypt: \" EMAIL\n    dokku config:set \"$APPNAME\" DOKKU_LETSENCRYPT_EMAIL=\"$EMAIL\"\nfi\n\ndokku storage:mount \"$APPNAME\" /var/lib/dokku/data/storage/\"$APPNAME\":/data\ndokku domains:add $APPNAME $APPNAME.\"$(cat /home/dokku/VHOST)\"\ndokku letsencrypt:enable \"$APPNAME\"\ndokku git:from-image \"$APPNAME\" \"$image_sha\"\n</code></pre> <p>This will start a Ryot using the default SQLite database backend. To use a separate backend, link a service to your app. For example with Postgres:</p> <pre><code>dokku postgres:create $APPNAME-service\ndokku postgres:link $APPNAME-service $APPNAME\n</code></pre> <p>You can create <code>/var/lib/dokku/storage/$APPNAME/config/ryot.{json,toml,yaml}</code> files to configure the instance. Make sure to restart the server after you change the configuration.</p>"},{"location":"guides/deployment.html#fly","title":"Fly","text":"<p>The demo Ryot instance is deployed to Fly. The following steps are required to deploy to Fly.</p> <ol> <li>Create a new postgres database for Ryot.</li> </ol> <pre><code>flyctl postgres create ryot-db\n</code></pre> <ol> <li>Copy the <code>fly.toml</code> in the root of this repository to your own repository. You WILL have to change the <code>app</code> key to a name of your choosing. Deploy it using the below command.</li> </ol> <pre><code>flyctl launch\n</code></pre> <ol> <li>Connect the database.</li> </ol> <pre><code>fly postgres attach --app ryot ryot-db\n</code></pre> <ol> <li>Optionally you can configure the instance using <code>fly secrets set</code>.</li> </ol> <pre><code>fly secrets set FILE_STORAGE_S3_URL='https://play.min.io:9000'\n</code></pre>"},{"location":"guides/exporting.html","title":"Exporting","text":"<p>Users can export their media history using the <code>/export</code> endpoint.</p> <ol> <li> <p>Login to your Ryot instance and go to the \"Tokens\" section in the \"Settings\"     page.   Generate a new application token.</p> </li> <li> <p>Execute the following curl command:</p> </li> </ol> <pre><code>curl &lt;ryot_url&gt;/export --header 'Authorization: Bearer &lt;token&gt;'\n</code></pre> <p>For example:</p> <pre><code>curl 'https://ryot.fly.dev/export' --header 'Authorization: Bearer 0ab88f6b-768a-4d65-885b-502016b634e0'\n</code></pre>"},{"location":"guides/exporting.html#type-definition","title":"Type definition","text":"<p>The export has the following type: <code>ImportOrExportItem&lt;string&gt;[]</code></p> <pre><code>// This file has been generated by Specta. DO NOT EDIT.\n\nexport type ImportOrExportItemReview = {\ndate: string | null;\nspoiler: boolean | null;\ntext: string | null;\n};\n\nexport type ImportOrExportItemRating = {\nreview: ImportOrExportItemReview | null;\nrating: string | null;\nshow_season_number: number | null;\nshow_episode_number: number | null;\npodcast_episode_number: number | null;\n};\n\nexport type ImportOrExportItemSeen = {\nstarted_on: string | null;\nended_on: string | null;\nshow_season_number: number | null;\nshow_episode_number: number | null;\npodcast_episode_number: number | null;\n};\n\nexport type MetadataSource =\n| \"Anilist\"\n| \"Audible\"\n| \"Custom\"\n| \"GoogleBooks\"\n| \"Igdb\"\n| \"Itunes\"\n| \"Listennotes\"\n| \"Openlibrary\"\n| \"Tmdb\";\n\n/**\n * Details about a specific media item that needs to be imported.\n */\nexport type ImportOrExportItem&lt;T&gt; = {\nsource_id: string;\nlot: MetadataLot;\nsource: MetadataSource;\nidentifier: T;\nseen_history: ImportOrExportItemSeen[];\nreviews: ImportOrExportItemRating[];\ncollections: string[];\n};\n\nexport type MetadataLot =\n| \"AudioBook\"\n| \"Anime\"\n| \"Book\"\n| \"Podcast\"\n| \"Manga\"\n| \"Movie\"\n| \"Show\"\n| \"VideoGame\";\n</code></pre>"},{"location":"guides/fitness.html","title":"Fitness","text":"<p>Some pointers on Ryot and fitness tracking.</p>"},{"location":"guides/fitness.html#exercises","title":"Exercises","text":"<p>Before you get exercises tracking working, you need to import all exercises data. Follow these steps to do so:</p> <ol> <li> <p>Make sure you have file storage integration working. This can be done by setting the relevant <code>file_storage.*</code> configuration parameters.</p> </li> <li> <p>Open your instance's <code>/graphql</code> endpoint. For example <code>https://ryot.fly.dev/graphql</code>.</p> </li> <li> <p>Enter the following mutation in the editor and run it.</p> </li> </ol> <pre><code>mutation DeployUpdateExerciseLibraryJob {\n  deployUpdateExerciseLibraryJob\n}\n</code></pre> <p>The response will include the number of exercises that will be imported. The   import will be done in background, and you can check the progress in the logs.</p> <p>Warning</p> <p>This needs to be run only once per instance.</p>"},{"location":"guides/video-games.html","title":"Video games","text":"<p>A guide about video games integration for Ryot.</p>"},{"location":"guides/video-games.html#integration-with-igdb","title":"Integration with IGDB","text":"<p>Ryot supports tracking video games via IGDB. However, the API is heavily rate limited, so it is not possible to hardcode the API keys in the application (unlike other keys which are hardcoded).</p> <p>You can follow the below steps to obtain your own API keys to enable video game tracking.</p>"},{"location":"guides/video-games.html#steps","title":"Steps","text":"<ol> <li> <p>Create a Twitch account.</p> </li> <li> <p>Open your developer console.</p> </li> <li> <p>Click on \"Register Your Application\" on the dashboard.</p> </li> <li> <p>Fill up the details. You must use a unique name. Any name will suffice. Click on     \"Create\" when you are done.</p> </li> <li> <p>You will be guided back to your application dashboard. Click on \"Manage\" for     the application you just created.</p> </li> <li> <p>Generate a client secret. Copy the Client ID and Client Secret.</p> </li> <li> <p>Set the <code>video_games.*</code> configuration variables in the environment as     described in the configuration docs.</p> </li> </ol>"},{"location":"guides/video-games.html#conclusion","title":"Conclusion","text":"<p>After following these steps, you should have video game integration working properly!</p>"}]}